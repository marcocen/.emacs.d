#+TITLE: Emacs config file
#+AUTHOR: Marco Centurion
#+EMAIL: mcenturion@protonmail.com

* Base Settings

This section contains some basic settings that aren't associated with any
particular package or mode

** Rebuild init
The evaluation of this org-file creates emacs-init.el. In order not to load an
older version of my config, I add this hook to delete that file any time emacs
is killed.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun mcenturion/delete-emacs-init ()
    (interactive)
    (let ((configs "~/.emacs.d/emacs-init.el"))
      (when configs
        (delete-file configs))))
  :hook (kill-emacs . mcenturion/delete-emacs-init))
#+END_SRC

** Custom.el
Store customizations in a separate file

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file)
#+END_SRC

** Personal information
Set some personal information variables.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Marco Centurión Virdó"
      user-mail-address "mcenturion@fing.edu.uy"
      calendar-location-name "Montevideo, UY")
#+END_SRC

** Sensible Defaults
Load the sensible-defaults file to use its functions at a later point.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/local/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Graphic configurations

This section contains settings that affect mostly the way emacs looks.

** Theme selection
Use the tango-dark theme, as it comes bundled with emacs by default and
is reasonably good-looking and comfrotable to use.

#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark)
#+END_SRC

** Element hiding
Hide all bars to maximize the space available for text editing. This
also forces me to learn as many keybindings and function names as
possible. Also add some information to the modeline and highlight
matching parenthesis.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(display-time-mode 1)
(setq display-time-default-load-average nil)
(column-number-mode t)
(show-paren-mode 1)
#+END_SRC

** Misc

Use the graphic clipboard to copy/pase.

#+BEGIN_SRC emacs-lisp

(use-package xclip
  :ensure t
  :config
  (xclip-mode 1))
#+END_SRC

Show line numbers.

#+BEGIN_SRC emacs-lisp
(use-package linum
  :hook
  ((prog-mode . linum-mode)
  (text-mode . linum-mode)))
#+END_SRC

* Auto completion and snippets

This section contains all settings related to autocompletion and
snippets. This includes search, as auto-completion in searching is
very important.

** Electric pair mode
   Insert matching parenthesis, brackets, quotes, etc. when the opening
   one is inserted.

   A not desired side-effect is that when used in conjunction with yasnippets in
   org-mode, the insertion of "<" inserts ">". This clashes with a lot of
   snippets, namely the "<src" snippet, where the expansion leaves the closing
   ">" at the end of the expanded block. One workaround is to ignore the problem
   and delete the closing ">", but that gets tideous, so for my use-case where I
   don't use "<>" that much, I just simply disabled insertion of the closing ">".

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (electric-pair-mode 1)
    (add-function :before-until electric-pair-inhibit-predicate
    (lambda (c) (eq c ?<))))
#+END_SRC

** Ivy

   Use ivy as the autocompletion engine. In the future I'll investigate
   icomplete and analyze if I can use that instead of Ivy, but for now I
   need to be able to work comfortably.

   The binding done in the ivy declaration is to allow me to press Return on "."
   or ".." and have ivy move to that directory instead of opening that directory
   with dired.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :init
  (ivy-mode 1)
  :bind
  (:map ivy-minibuffer-map
	("C-m" . ivy-alt-done)
	("C-j" . ivy-alt-done)))
(use-package counsel
  :ensure t
  :after
  (ivy))
#+END_SRC

** Snippets

   Yasnippet is a snippet engine for emacs. It allow one to define snippets
   based on the mayor mode by using a short name and expanding it with <TAB>.

   I use yasnippet-snippets, a collection of snippets for a lot of modes, but I
   also have some snippets defined in my snippets directory. Those I maintain in
   different repositories, for ease of sharing.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after
    (yasnippet))
#+END_SRC
** Which-key

   Which key improves discoveravilty of new emacs functions by showing what
   keybindings are available for a given prefix, once a determined time interval
   has passed. This not only serves to refresh ones memory but to discover some
   new functions or keybindings, even by accident!

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1))
   #+END_SRC

** Expand Region

   Expand region allows the expansion of a selection in semantic intervals. That
   allows for quick selection when one wants to enclose something in brackets,
   quotes, or simply move a semantic block of text.

   This adds the following keybindings:

   | Binding         | Action                                                                 |
   |-----------------+------------------------------------------------------------------------|
   | C-;             | Expands the selected region                                            |
   | C-: (C-Shift-;) | Contracts the selected region (useful when the expansion went too far) |

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    (("C-;" . er/expand-region)
     ("C-:" . er/contract-region)))
#+END_SRC

* Programming Languages

This section contains all settings directly related with a specific programming
language.

** Puppet

   Puppet is a Configuration Management System that uses a declarative language
   based on ruby. This mode adds syntax highlighting and some useful
   keybindings:

   | Keybind | Action                                                           |
   |---------+------------------------------------------------------------------|
   | C-c C-a | Aligns all => of a given block, as per the puppet linting guides |
   | C-c '   | Toggle the quotes around the point between single and double     |
   | C-c ;   | Clears the string around point                                   |
   | C-c C-j | Allows to jump between resources declared in a file              |
   | C-v C-v | Runs a syntax check in the file                                  |
   | C-c C-j | Runs a linter on the file                                        |

   To use the sytax check or linter, puppet and puppet-lint must be installed in
   the system.

#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode
    :ensure t)
#+END_SRC

** Org mode

   Org-mode is much too big to explain in this config file. The only thing of
   note is that I defined two capture templates, t and j, that save my todos and
   journal entries in the respective files. I don't use org-capture but really should.

   | Keybind | Action               |
   |---------+----------------------|
   | C-c c   | Launches org-capture |

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :custom
    (org-capture-templates '(("t" "Todo" entry (file+headline "~/notes/todo.org" "Inbox")
			      "* TODO %?\n")
			     ("j" "Journal" entry (file+datetree "~/notes/journal.org")
			      "* %?\nEntered on %U\n  %i")))
    (setq org-agenda-files '("~/notes/"))
    :bind
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda)))
#+END_SRC

   Use org-bullets to draw prettier bullets when displaying an org-file.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode)
    :after
    (org))
#+END_SRC

Export engines for org-mode

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode)
  :after
  (org))

#+END_SRC
* Tools

This section contains the configuration of the different tools used inside of
emacs.

** Magit

   Magit is a git frontend for emacs. Everything that can be done from the command
   line can be done from within magit.

   | Keybind | Action         |
   |---------+----------------|
   | C-c m   | Launches magit |

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-c m" . magit)))
#+END_SRC

** Dired

   Dired is a file-explorer built into emacs. When inside a dired buffer
   files/directories can be marked to take bulk actions, the buffer can be made
   editable to change filenames and much, much more.

   | Keybind | Action                                                      |
   |---------+-------------------------------------------------------------|
   | C-c d   | Prompts for a directory to open with dired, in other window |

   When inside a dired buffer, the following keybindings were added:

   | Keybind | Action                                                                            |
   |---------+-----------------------------------------------------------------------------------|
   | tab     | Expands or contracts a subtree in the same buffer                                 |
   | C-tab   | Cycles a subtree, that is, it expands or contracts every subtree at the same time |
   | S-tab   | Removes a subtree. Useful when trying to go up in the directory hierarchy         |

   The following keybindings are useful when in a dired buffer:

   | Keybind | Action                                                                                        |
   |---------+-----------------------------------------------------------------------------------------------|
   | M       | Edit a files mode                                                                             |
   | d       | Marks a file for deletion                                                                     |
   | u       | Drops all marks put upon a file                                                               |
   | o       | Opens a file in the other window                                                              |
   | C       | Copies a file                                                                                 |
   | R       | Renames a file                                                                                |
   | C-x C-q | Enters editable-dired mode, making file names editable. C-c C-c to confirm, C-c C-k to cancel |
   | C-(     | Hides details like mode, owner, etc, leaving only the filenames                               |
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq dired-listing-switches "-lha --group-directories-first")
    :bind
    ("C-x d" . dired-other-window))

  (use-package dired-subtree
    :defer t
    :ensure t
    :after dired
    :config
    (setq dired-subtree-use-backgrounds nil)
    :bind
    (:map dired-mode-map
	  ("<tab>" . dired-subtree-toggle)
	  ("<C-tab>" . dired-subtree-cycle)
	  ("<S-iso-lefttab>" . dired-subtree-remove)))
#+END_SRC
** Projectile

   Projectile is a package that adds features for interacting with projects.
   This includes, but is not limited to, finding files in a project, grepping in
   a project and opening a project directory in dired.

   | Keybind | Action                              |
   |---------+-------------------------------------|
   | C-c p   | Launches the projectile command map |

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind
    (:map projectile-mode-map
	  ("C-c p" . projectile-command-map)))
#+END_SRC
