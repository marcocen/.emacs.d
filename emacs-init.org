#+TITLE: Emacs config file
#+AUTHOR: Marco Centurion
#+EMAIL: mcenturion@protonmail.com

* Base Settings

  This section contains some basic settings that aren't associated with any
  particular package or mode

** Rebuild init

   The evaluation of this org-file creates emacs-init.el. In order not to load an
   older version of my config, I add this hook to delete that file any time emacs
   is killed.

   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :config
       (defun mcenturion/delete-emacs-init ()
	 (interactive)
	 (let ((configs "~/.emacs.d/emacs-init.el"))
	   (when configs
	     (delete-file configs))))
       :hook (kill-emacs . mcenturion/delete-emacs-init))
   #+END_SRC

** Custom.el

   Store customizations in a separate file

   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")

     (unless (file-exists-p custom-file)
       (write-region "" nil custom-file))

     (load custom-file)
   #+END_SRC

** Personal information

   Set some personal information variables.

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Marco Centurión Virdó"
	   user-mail-address "mcenturion@fing.edu.uy"
	   calendar-location-name "Montevideo, UY")
   #+END_SRC

** Sensible Defaults

   Load the sensible-defaults file to use its functions at a later point.

   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/local/sensible-defaults.el")
     (sensible-defaults/use-all-settings)
     (sensible-defaults/use-all-keybindings)
     (sensible-defaults/backup-to-temp-directory)
   #+END_SRC

* Graphic configurations

  This section contains settings that affect mostly the way emacs looks.

** Theme selection

   Use prots modus-operandi theme. It has great contrast for everything I've seen
   so far.

   #+BEGIN_SRC emacs-lisp
     (use-package modus-operandi-theme
       :ensure t
       :config
       (load-theme 'modus-operandi t))
   #+END_SRC

** Element hiding

   Hide all bars to maximize the space available for text editing. This
   also forces me to learn as many keybindings and function names as
   possible. Also add some information to the modeline and highlight
   matching parenthesis.

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (toggle-scroll-bar -1)
     (display-time-mode 1)
     (setq display-time-default-load-average nil)
     (column-number-mode t)
     (show-paren-mode 1)
   #+END_SRC

** Rainbow delimiters

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :hook
       (prog-mode rainbow-delimiters-mode)
       :config
       (setq rainbow-delimiters-outermost-only-face-count 0)
       (setq rainbow-delimiters-max-face-count 2)
       (set-face-foreground 'rainbow-delimiters-depth-1-face
			    "dodger-blue")
       (set-face-foreground 'rainbow-delimiters-depth-2-face
			    "hot-pink"))
   #+END_SRC

** Misc

   Use the graphic clipboard to copy/pase.

   #+BEGIN_SRC emacs-lisp

     (use-package xclip
       :ensure t
       :config
       (xclip-mode 1))
   #+END_SRC

   Show line numbers.

   #+BEGIN_SRC emacs-lisp
     (use-package linum
       :hook
       ((prog-mode . linum-mode)
       (text-mode . linum-mode)))
   #+END_SRC

* Tools

  This section contains the configuration of various tools that make using emacs
  a lot faster/useful.

** Electric pair mode

   Insert matching parenthesis, brackets, quotes, etc. when the opening
   one is inserted.

   A not desired side-effect is that when used in conjunction with yasnippets in
   org-mode, the insertion of "<" inserts ">". This clashes with a lot of
   snippets, namely the "<src" snippet, where the expansion leaves the closing
   ">" at the end of the expanded block. One workaround is to ignore the problem
   and delete the closing ">", but that gets tideous, so for my use-case where I
   don't use "<>" that much, I just simply disabled insertion of the closing ">".

   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :config
       (electric-pair-mode 1)
       (add-function :before-until electric-pair-inhibit-predicate
       (lambda (c) (eq c ?<))))
   #+END_SRC

** Vertico

   Vertico provides a minimalistic vertical completion UI, which is
   based on the default completion system. By reusing the default
   system, Vertico achieves full compatibility with built-in Emacs
   commands and completion tables. Vertico is pretty bare-bone and
   comes with only a minimal set of commands. The code base is small
   (~500 lines of code without whitespace and comments). Additional
   enhancements can be installed separately via complementary
   packages.

   #+BEGIN_SRC emacs-lisp
     (use-package vertico
       :init
       (vertico-mode)
       ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
       ;; (setq vertico-cycle t)
     )

     ;; You may prefer to use `initials' instead of `partial-completion'.
     (use-package orderless
       :init
       (setq completion-styles '(orderless)
	     completion-category-defaults nil
	     completion-category-overrides '((file (styles . (partial-completion))))))
   #+END_SRC
   
** Undo-tree

   Undo tree exposes the emacs undo-history as a the tree it actually is,
   instead of hiding it like a sort-of-linear-undo.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode)
       :bind
       (:map undo-tree-map
	     ("C-c u" . undo-tree-visualize)
	     ("C-x u" . undo)))
   #+END_SRC

** Snippets

   Yasnippet is a snippet engine for emacs. It allow one to define snippets
   based on the mayor mode by using a short name and expanding it with <TAB>.

   I use yasnippet-snippets, a collection of snippets for a lot of modes, but I
   also have some snippets defined in my snippets directory. Those I maintain in
   different repositories, for ease of sharing.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode))

     (use-package yasnippet-snippets
       :ensure t
       :after
       (yasnippet))
   #+END_SRC

** Which-key

   Which key improves discoveravilty of new emacs functions by showing what
   keybindings are available for a given prefix, once a determined time interval
   has passed. This not only serves to refresh ones memory but to discover some
   new functions or keybindings, even by accident!

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1)
       (setq which-key-inhibit-regexps '("C-c r")))
   #+END_SRC

** Expand Region

   Expand region allows the expansion of a selection in semantic intervals. That
   allows for quick selection when one wants to enclose something in brackets,
   quotes, or simply move a semantic block of text.

   This adds the following keybindings:

   | Binding         | Action                                                                 |
   |-----------------+------------------------------------------------------------------------|
   | C-;             | Expands the selected region                                            |
   | C-: (C-Shift-;) | Contracts the selected region (useful when the expansion went too far) |

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind
       (("C-;" . er/expand-region)
	("C-:" . er/contract-region)))
   #+END_SRC

** Magit

   Magit is a git frontend for emacs. Everything that can be done from the command
   line can be done from within magit.

   | Keybind | Action         |
   |---------+----------------|
   | C-c m   | Launches magit |

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind
       (("C-c m" . magit)))
   #+END_SRC

** Dired

   Dired is a file-explorer built into emacs. When inside a dired buffer
   files/directories can be marked to take bulk actions, the buffer can be made
   editable to change filenames and much, much more.

   | Keybind | Action                                                      |
   |---------+-------------------------------------------------------------|
   | C-c d   | Prompts for a directory to open with dired, in other window |

   When inside a dired buffer, the following keybindings were added:

   | Keybind | Action                                                                            |
   |---------+-----------------------------------------------------------------------------------|
   | tab     | Expands or contracts a subtree in the same buffer                                 |
   | C-tab   | Cycles a subtree, that is, it expands or contracts every subtree at the same time |
   | S-tab   | Removes a subtree. Useful when trying to go up in the directory hierarchy         |

   The following keybindings are useful when in a dired buffer:

   | Keybind | Action                                                                                        |
   |---------+-----------------------------------------------------------------------------------------------|
   | M       | Edit a files mode                                                                             |
   | d       | Marks a file for deletion                                                                     |
   | u       | Drops all marks put upon a file                                                               |
   | o       | Opens a file in the other window                                                              |
   | C       | Copies a file                                                                                 |
   | R       | Renames a file                                                                                |
   | C-x C-q | Enters editable-dired mode, making file names editable. C-c C-c to confirm, C-c C-k to cancel |
   | C-(     | Hides details like mode, owner, etc, leaving only the filenames                               |
   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :config
       (setq dired-listing-switches "-lha --group-directories-first")
       :bind
       ("C-x d" . dired-other-window))

     (use-package dired-subtree
       :defer t
       :ensure t
       :after dired
       :config
       (setq dired-subtree-use-backgrounds nil)
       :bind
       (:map dired-mode-map
	     ("<tab>" . dired-subtree-toggle)
	     ("<C-tab>" . dired-subtree-cycle)
	     ("<S-iso-lefttab>" . dired-subtree-remove)))

     (use-package dired-narrow
       :defer t
       :ensure t
       :after dired
       :bind
       (:map dired-mode-map
	     ("C-c C-n" . dired-narrow)))
   #+END_SRC

** Gnus

   Configure gnus to use the appropiate imap and smtp servers

   #+BEGIN_SRC emacs-lisp
     (setq gnus-select-method '(nnnil ""))
     (setq gnus-secondary-select-methods
	   '((nntp "news.gwene.org")
	     (nnimap "FING"
		     (nnimap-address "imap.fing.edu.uy"))))
     (setq send-mail-function    'smtpmail-send-it
	   smtpmail-smtp-server  "smtp.fing.edu.uy"
	   smtpmail-stream-type  'starttls
	   smtpmail-smtp-service 25
	   user-full-name        "Marco Centurion"
	   user-mail-address     "mcenturion@fing.edu.uy"
	   message-signature     "Marco Centurion
     Unidad de Recursos Informáticos
     Facultad de Ingeniería - UdelaR")
   #+END_SRC

   Set gnus as the default email client

   #+BEGIN_SRC emacs-lisp
     (setq mail-user-agent 'gnus-user-agent)
   #+END_SRC

   Configure some display options

   #+BEGIN_SRC emacs-lisp
     (setq gnus-use-full-window nil)
     (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
     (setq gnus-topic-line-format "%i[%n %A] %v\n")
     (setq gnus-thread-sort-functions
           '(gnus-thread-sort-by-most-recent-date))
   #+END_SRC

   Configure gnus to fetch new email every 2 minutes

   #+BEGIN_SRC emacs-lisp
     (add-hook 'gnus-startup-hook
	  '(lambda ()
	       (gnus-demon-init)
	       (gnus-demon-add-handler 'gnus-group-get-new-news 2 t)))
   #+END_SRC

* Programming Languages

  This section contains all settings directly related with a specific programming
  language.

** Puppet

   Puppet is a Configuration Management System that uses a declarative language
   based on ruby. This mode adds syntax highlighting and some useful
   keybindings:

   | Keybind | Action                                                           |
   |---------+------------------------------------------------------------------|
   | C-c C-a | Aligns all => of a given block, as per the puppet linting guides |
   | C-c '   | Toggle the quotes around the point between single and double     |
   | C-c ;   | Clears the string around point                                   |
   | C-c C-j | Allows to jump between resources declared in a file              |
   | C-v C-v | Runs a syntax check in the file                                  |
   | C-c C-j | Runs a linter on the file                                        |

   To use the sytax check or linter, puppet and puppet-lint must be installed in
   the system.

   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode
       :ensure t)
   #+END_SRC

** Org mode

   I use org-mode as my fundamental mode. I find it much more useful when I open
   any kind of buffer.

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :custom
       (major-mode 'org-mode))
   #+END_SRC

*** org-mode customizations

    I declare an alternative keybinding to export an org-table directly to a csv
    separated by ';'. For that I had to declare an alternative convertor as well
    as an alternative org-table-export.

    | Keybind     | Action                                       |
    | C-u C-c C-e | Exports an org-table to csv separated by ';' |

    #+BEGIN_SRC emacs-lisp
      (use-package org
	:ensure t
	:config
	(defun mcv/orgtbl-to-csv (table params)
	  "Convert the orgtbl-mode table to CSV with ';' separator"
	  (orgtbl-to-generic table
			     (org-combine-plists '(:sep ";" :fmt org-quote-csv-field)
						 params)))
	(defun mcv/org-table-export-csv ()
	  (interactive)
	  (let ((file (read-file-name "Export table to:")))
	    (org-table-export file "mcv/orgtbl-to-csv")))
	:bind
	((:map org-mode-map
	       ("C-u C-c C-e" . mcv/org-table-export-csv))))
    #+END_SRC

    I don't normally use all options that the default export template provides,
    so I redefine =org-export-options-alist= to contain only those that I want.

    #+BEGIN_SRC emacs-lisp
      (use-package org
	:ensure t
	:custom
	(org-export-options-alist
	 '((:title "TITLE" nil nil parse)
	   (:date "DATE" nil nil parse)
	   (:author "AUTHOR" nil user-full-name parse)
	   (:email "EMAIL" nil user-mail-address t)
	   (:language "LANGUAGE" nil "es" t)
	   (:with-toc nil "toc" nil))))

    #+END_SRC

    Use org-bullets to draw prettier bullets when displaying an org-file.

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook 'org-bullets-mode)
	:after
	(org))
    #+END_SRC
** RT-Liberation

   #+BEGIN_SRC emacs-lisp
	  (use-package rt-liberation
	    :ensure nil
	    :load-path "packages/rtliber"
	    :bind
	    (("C-c r" . hydra-rt/body))
	    :custom
	    (rt-liber-rest-url "rt.fing.edu.uy")
	    (rt-liber-rt-version "4.4.4")
	    (rt-liber-rest-username "mcenturion")
	    (rt-liber-rest-use-auth-source-p t)
	    (rt-liber-username "mcenturion")
	    (rt-liber-base-url "https://rt.fing.edu.uy")
	    :config
	    (defun rt-liber-display-ticket (ticket-id)
	      "Display ticket with TICKET-ID in the ticket-browser."
	      (interactive "MTicket ID: ")
	      (rt-liber-browse-query
	       (rt-liber-compile-query
		(id ticket-id))))

	    (defhydra hydra-rt (:color blue
				:hint nil)
	      "
     My Tickets^  ^Queues^    ^Search
     ^^^^^^-----------------------------------
     _r_: Open     _q_: Queue  _s_: By subject
     _t_: Today ^ ^ ^ ^
     "
	      ("r" mc-rt-my-tickets nil)
	      ("t" mc-rt-today nil)
	      ("s" mc-rt-search nil)
	      ("q" mc-rt-queue nil))
	    (defun mc-rt-my-tickets ()
	      "Display my open RT tickets"
	      (interactive)
	      (rt-liber-browse-query
	       (rt-liber-compile-query
		(and (owner "mcenturion")
		     (status "open")))))
	    (defun mc-rt-today ()
	      "Display my tickets that were updated today"
	      (interactive)
	      (rt-liber-browse-query
	       (rt-liber-compile-query
		(and (owner "mcenturion")
		     (lastupdated nil
				  "yesterday")))))
	    (defun mc-rt-search (query)
	      "Display tickets whose subject matches"
	      (interactive "MSubject: ")
	      (rt-liber-browse-query
	       (rt-liber-compile-query
		(subject query))))
	    (defun mc-rt-queue (query)
	      "Display my open RT tickets"
	      (interactive "MQueue: ")
	      (rt-liber-browse-query
	       (rt-liber-compile-query
		(and (status "open")
		     (queue query))))))
   #+END_SRC
** Eshell

   #+begin_src emacs-lisp
     (use-package esh-mode
       :ensure nil
       :config
       (defun mc/eshell-pipe-to-buffer ()
	 (interactive)
	 (insert (format ">>> #<%s>"
			 (read-buffer-to-switch "Buffer: "))))
       (defun mc/select-or-create (arg)
	 "Commentary ARG."
	 (if (string= arg "New eshell")
	     (eshell t)
	   (switch-to-buffer arg)))
       (defun mc/eshell-switcher (&optional arg)
	 "Commentary ARG."
	 (interactive)
	 (let* (
		(buffers (cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode)) (buffer-list)) )
		(names (mapcar (lambda (n) (buffer-name n)) buffers))
		(num-buffers (length buffers)))
	   (cond ((eq num-buffers 0) (eshell (or arg t)))
		 (t (mc/select-or-create (completing-read "Select Shell:" (cons "New eshell" names)))))))
       :bind
       (("C-c t" . mc/eshell-switcher)
	(:map eshell-mode-map
	      ("C-c >" . mc/eshell-pipe-to-buffer))))
   #+end_src


   The =eshell-bookmark= package adds supoort to add eshell bookmarks

   #+begin_src emacs-lisp
   (use-package eshell-bookmark
   :config
   (eshell-bookmark-setup))
   #+end_src

** VTerm

   #+begin_src emacs-lisp
     (use-package vterm
	 :ensure t)
   #+end_src

** Notmuch

   #+begin_src emacs-lisp
     (use-package notmuch
       :ensure t
       :custom
       (notmuch-search-oldest-first nil)
       (notmuch-show-empty-saved-searches t)
       (notmuch-saved-searches
	`(( :name "unread"
		  :query "tag:inbox and tag:unread"
		  :sort-order newest-first
		  :key ,(kbd "u"))
	  ( :name "inbox"
		  :query "tag:inbox"
		  :sort-order newest-first
		  :key ,(kbd "i"))
	  (:name "Flagged"
		 :query "tag:flagged"
		 :sort-order: newest-first
		 :key ,(kbd "fl"))
	  ( :name "sent"
		  :query "folder:Sent"
		  :sort-order newest-first)
	  (:name "Backup"
		 :query "tag:backup and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "b"))
	  (:name "Cron"
		 :query "tag:cron and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "c"))
	  (:name "Drafts"
		 :query "folder:Drafts"
		 :sort-order: newest-first)
	  (:name "Fail2Ban"
		 :query "tag:fail2ban and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "fa"))
	  (:name "Logwatch"
		 :query "tag:logwatch and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "l"))
	  (:name "Moodle"
		 :query "tag:moodle and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "m"))
	  (:name "Nagios"
		 :query "tag:nagios and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "n"))
	  (:name "Drupal"
		 :query "tag:drupal and tag:unread"
		 :sort-order: newest-first
		 :key ,(kbd "d"))
	  (:name "SMTP"
		 :query "tag:smtp and tag:unread"
		 :sort-order: newest-first
		  :key ,(kbd "s"))
	  )))
   #+end_src
